#include <unistd.h>
#include <stdio.h>
#include <fcntl.h>
#include <iostream>
#include <sys/wait.h>
#include <unistd.h>
#include <string>
#include <algorithm>
#include <vector>
#include <sstream>
#include <iterator>
#include "vector_to_chararr.hpp"
#include "errors_and_warnings.hpp"

using namespace std;

int open_file(string fpath, int flags) {
	int fd = open(fpath.c_str(), flags);
	if (fd < 0) return -1;
	return fd;
}

namespace pipc {
	class process {
		private:
			string program;
			vector<string> arguments;
			string command;
			vector<string>::iterator it; // for reuse
			std::pair<string, string> sstdout, sstderr;
			std::string sstdin;
			char* cstoud, csdin, csderr;
			int fd_in, fd_out, fd_err;
			bool finished;
			bool isexec = false;
			pid_t pid;
			int result;
		
		public:
			bool _forward_parse(string s,
								std::pair<string, string>& wh,
								vector<string>& args) {
				bool res = false;
				it = std::find(args.begin(), args.end(), s);
				if (it != args.end()) {
					if (next(it, 1) != args.end()) {
						wh.second = *next(it, 1);
						wh.first = *it;
						//str += s + " " + out;
						args.erase(it+1);
						res = true;
					} else {
						warn(s+" used, file not specified");
					}
					args.erase(it);
				}
				return res;
			}
			void _parse_command(vector<string> args) {
				for (string s : {">", "1>", ">>", "1>>"})
					_forward_parse(s, sstdout, args);
				for (string s : {"2>", "2>>"})
					_forward_parse(s, sstderr, args);

				if (_forward_parse("&>", sstdout, args)) {
					sstderr = std::pair<string, string>("2>", sstdout.second);
					sstdout = std::pair<string, string>("1>", sstdout.second);
				}
				if (_forward_parse("&>>", sstdout, args)) {
					sstderr = std::pair<string, string>("2>>", sstdout.second);
					sstdout = std::pair<string, string>("1>>", sstdout.second);
				}
			}

			process(string command) {
				istringstream iss(command);
				vector<string> args{istream_iterator<string>{iss},
                      istream_iterator<string>{}};
				if (args.size() > 1) _parse_command(args);
				program = args[0];
				arguments = args;
			}
			
			process(string path, vector<string> args) {
				program = path;
				arguments = args;
				arguments.insert(arguments.begin(), program);
			}

			int _string_to_flag(string how) {
				int flag;
				if (how == ">>" || how == "1>>" || how == "2>>")
					flag = O_APPEND | O_CREAT | W_OK;
				else if (how == ">" || how == "1>" || how == "2>")
					flag = W_OK | O_CREAT;
				else
					flag = R_OK;
				return flag;
			}
			
			int _forward(string sfile, int fd, string how, int dupfd) {
				/*
				sfile - string file, if specified - warn the user
						that they are overriding their previous choices
				fd - file descriptor of an open file
				how - instead of a flag
				dupfd - what fd (STDIN_/STDOUT_/STDERR_FILENO) it has to replace
				*/
				int flag = _string_to_flag(how);
				int fd_f = fd;
				if (fd != -1) {
					if (sfile.size() != 0)
						warn("forwarding warn - you previously specified a file to forward to, proceeding using provided fd");
				}
				if (fd_f < 0)
					return error_return("forwarding error - invalid file");
				if (dup2(fd_f, dupfd) < 0) return error_return("forwarding error - dup2 failed");
				return fd_f;
			}
			
			int _open_forward(string sfile, char* cfile, int flag, int dupfd) {
				/*
				sfile - string file - if specified have to warn the user
									that they override their own decision
				cfile - chr* file - try to open and use
				flag - flag to open
				dupfd - what fd (STDIN_/STDOUT_/STDERR_FILENO) it has to replace
				*/
				if (sfile.size() != 0)
					warn("forwarding warn - you previously specified a file to forward to, proceeding using provided fd");
				int fd_f = open(cfile, flag);
				if (fd_f < 0)
					return error_return("forwarding error - invalid file");
				if (dup2(fd_f, dupfd) < 0) return error_return("forwarding error - dup2 failed");
				return fd_f;
			}

			int _forward_all(int fdin, int fdout, int fderr) {
				int fdIn;
				if ((fdin > -1) || (sstdin.size() > 0)) {
					fdIn = _forward(sstdin, fdin, "", STDIN_FILENO);
					if (fdIn < 0) return error_return("failed to forward stdin", -1);
					fd_in = fdIn;
				}
				int fdOut;
				if ((fdout > -1) || (sstdout.second.size() > 0)) {
					fdOut = _forward(sstdout.first, fdout, sstdout.second, STDOUT_FILENO);
					if (fdOut < 0)
						return error_return("failed to forward stdout", -1);
					fd_out = fdOut;
				}
				int fdErr;
				if ((fderr > -1) || (sstderr.second.size() > 0)) {
					fdErr = _forward(sstderr.first, fderr, sstderr.second, STDERR_FILENO);
					if (fdErr < 0)
						return error_return("failed to forward sstderr", -1);
					fd_err = fdErr;
				}
				return 0;
			}
			
			int run_exec(int fdin=-1, int fdout=-1, int fderr=-1) {
				/*
				execute the program and forward its
				stdin, stdout, stderr into given file descriptors
				if fdIn\fdOut\fdErr -1:
					if sstdin\sstdout\sstderr attribute had been set - try to open it instead
				else:
					if sstdin\sstdout\sstderr attribute had been set - issue a warning, use the fd
				*/
				isexec = true;
				pid_t pid = fork();
				if (pid < 0) return error_return("failed to fork", -1);
				if (pid == 0) {
					if (_forward_all(fdin, fdout, fderr) < 0)
						error_return("failed forward", -1);
					result = execvp(program.c_str(), vector_to_chararr(arguments));
					exit(result);
				}
				else {
					waitpid(pid, &result, 0);
				}
				return result;
			}
			
			string run_exec_grab() {
				/*
				same as run_exec_grab, but without fds
				*/
				isexec = true;
				int pipefd[2];
				if (pipe(pipefd) < 0) throw PipeError("failed to pipe");

				pid_t pid = fork();
				if (pid < 0) throw ForkError("failed to fork");

				if (pid == 0) {
					if (close(pipefd[0]) < 0) 
						throw PipeError("failed to close pipe reading end");

					if (dup2(fd_out, pipefd[1]) < 0)
						throw Dup2Error("failed to dup2");

					result = execvp(program.c_str(), vector_to_chararr(arguments));
					close(pipefd[1]);
					exit(result);
				}
				else {
					waitpid(pid, &result, 0);
					if (close(pipefd[1]) < 0)
						throw CloseError("failed to close writing end of the pipe");

					string output = "";
					int BUF_SIZE = 1024;
					char buf[BUF_SIZE+1];
					int r = BUF_SIZE;
					while (r == BUF_SIZE) {
						r = read(pipefd[0], buf, BUF_SIZE);
						if (r < 0) {
							warn("failed to read");
						    break;
						}
						buf[r] = '\0';
						output += string(buf);
					}
					return output;
				}
			}
			string run_exec_grab(int fdin=-1, int fdout=-1, int fderr=-1) {
				/*
				same as run_exec, but grabs last processe's output into a string
				! stdout, not stderr
				*/
				isexec = true;
				int pipefd[2];
				if (pipe(pipefd) < 0) throw PipeError("failed to pipe");

				pid_t pid = fork();
				if (pid < 0) throw ForkError("failed to fork");

				if (pid == 0) {
					if (_forward_all(fdin, fdout, fderr) < 0)
						throw ForwardError("failed forward");

					if (close(pipefd[0]) < 0) 
						throw PipeError("failed to close pipe reading end");

					if (dup2(fd_out, pipefd[1]) < 0)
						throw Dup2Error("failed to dup2");

					result = execvp(program.c_str(), vector_to_chararr(arguments));
					close(pipefd[1]);
					exit(result);
				}
				else {
					waitpid(pid, &result, 0);
					if (close(pipefd[1]) < 0)
						throw CloseError("failed to close writing end of the pipe");

					string output = "";
					int BUF_SIZE = 1024;
					char buf[BUF_SIZE+1];
					int r = BUF_SIZE;
					while (r == BUF_SIZE) {
						r = read(pipefd[0], buf, BUF_SIZE);
						if (r < 0) {
							warn("failed to read");
						    break;
						}
						buf[r] = '\0';
						output += string(buf);
					}
					return output;
				}
			}

			int _open_forward_all(char* fin, char* fout, char* ferr) {
				int fdIn;
				if ((fin != NULL) || (sstdin.size() > 0)) {
					fdIn = _open_forward(sstdin, fin, R_OK, STDIN_FILENO);
					if (fdIn < 0) return error_return("failed to forward stdin", -1);
					fd_in = fdIn;
				}
				int fdOut;
				if ((fout != NULL) || (sstdout.second.size() > 0)) {
					fdOut = _open_forward(sstdout.first, fout, W_OK|O_CREAT, STDOUT_FILENO);
					if (fdOut < 0) return error_return("failed to forward stdout", -1);
					fd_out = fdOut;
				}
				int fdErr;
				if ((ferr != NULL) || (sstderr.second.size() > 0)) {
					fdErr = _open_forward(sstderr.first, ferr, W_OK|O_CREAT, STDERR_FILENO);
					if (fdErr < 0) return error_return("failed to forward sstderr", -1);
					fd_err = fdErr;
				}
				return 0;
			}

			int run_exec(char* fin=NULL, char* fout=NULL, char* ferr=NULL) {
				/*
				execute the program and forward its
				stdin, stdout, stderr into given file descriptors
				if fdIn\fdOut\fdErr -1:
					if sstdin\sstdout\sstderr attribute had been set - try to open it instead
				else:
					if sstdin\sstdout\sstderr attribute had been set - issue a warning, use the fd
				*/
				isexec = true;
				pid_t pid = fork();
				if (pid < 0) return error_return("failed to fork", -1);
				if (pid == 0) {
					if (_open_forward_all(fin, fout, ferr) < 0)
						return error_return("failed forwarding", -1);
					result = execvp(command.c_str(), vector_to_chararr(arguments));
					exit(result);
				}
				else {
					waitpid(pid, &result, 0);
				}
				return result;
			}

			string run_exec_grab(char* fin=NULL, char* fout=NULL, char* ferr=NULL) {
				/*
				same as run_exec, but grabs last processe's output into a string
				! stdout, not stderr
				*/
				isexec = true;
				int pipefd[2];
				if (pipe(pipefd) < 0) {
					warn("failed to pipe");
					return "";
				}
				pid_t pid = fork();
				if (pid < 0) {
					warn("failed to fork");
					return "";
				}
				if (pid == 0) {
					if (_open_forward_all(fin, fout, ferr) < 0) {
						warn("failed forwarding");
						return "";
					}
					if (close(pipefd[0]) < 0) {
						warn("failed to close pipe reading end");
						return "";
					}
					if (dup2(fd_out, pipefd[1]) < 0) {
						warn("failed to dup2");
						return "";
					}
					result = execvp(program.c_str(), vector_to_chararr(arguments));
					close(pipefd[1]);
					exit(result);
				}
				else {
					waitpid(pid, &result, 0);
					if (close(pipefd[1]) < 0) {
						warn("failed to close writing end of the pipe");
						return "";
					}
					string output = "";
					int BUF_SIZE = 1024;
					char buf[BUF_SIZE+1];
					int r = BUF_SIZE;
					while (r == BUF_SIZE) {
						r = read(pipefd[0], buf, BUF_SIZE);
						if (r < 0) {
							warn("failed to read");
							return "";
						}
						buf[r] = '\0';
						output += string(buf);
					}
					return output;
				}
			}

			template <typename IN, typename OUT, typename ERR>
			void run(IN const&, OUT const&, ERR const&) {
				if (typeof(IN) == int) {
					std::cout << "fd" << std::endl;
					fd_in = IN;
				}
				else if (typeof(IN) == char*) {
					std::cout << "char*" << std::endl;
					csdin = IN;
				}
				else if (typeof(IN) == string) {
					std::cout << "string" << std::endl;
					sstdin = IN;
				}
				else {
					warn("invalid stdin type");
				}
			}

			void forward_sstdin(string file) {
				sstdin = file;
			}

			void forward_stdout_to_file(string where, string how="1>") {
				if (!isexec) sstdout = std::pair<string, string>(how, where);
			}
			void forward_stderr_to_file(string where, string how="2>") {
				if (!isexec) sstderr = std::pair<string, string>(how, where);
			}
			
			void reset_stdout() { sstdout = pair<string, string>("", ""); }
			void reset_sstderr() { sstderr = pair<string, string>("", ""); }
			
			
			bool is_done() { return isexec; }
			int get_result() { return result; }
	};

	int pipe_execute(std::initializer_list<process> processes) {
		if (processes.size() < 2)
			return error_return("can't connect < 2 processes with pipes");

		int n = processes.size();
		int pipes[n-1][2];
		for (int i = 0; i < n-1; i++)
			if (pipe(pipes[i]) < 0)
				return error_return("pipe failed");
		
		std::vector<process> ps(processes);

		ps[0].run_exec(-1, pipes[0][1], -1);
		for (int i = 1; i < n-1; i++) {
			if (close(pipes[i-1][1]) < 0)
				return error_return("failed to close an end of the pipe");
			ps[i].run_exec(pipes[i-1][0], pipes[i][1], -1);
			if (close(pipes[i-1][0]) < 0)
				return error_return("failed to close an end of the pipe");
		}
		
		if (close(pipes[n-2][1]) < 0)
			return error_return("failed to close an end of the pipe");
		// last process - don't forward stdout
		ps[n-1].run_exec(pipes[n-2][0], -1, -1);
		if (close(pipes[n-2][0]) < 0)
			return error_return("failed to close an end of the pipe");
		return n;
	}
}
